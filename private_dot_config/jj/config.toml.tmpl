"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"
# This config is based on: https://gist.github.com/thoughtpolice/8f2fd36ae17cd11b8e7bd93a70e31ad6

[user]
name = {{ .name | quote }}
email = {{ .email | quote }}

[format]
tree-level-conflicts = true

[git]
push-bookmark-prefix = "joster/change-"

# Disable pushing of all commits that are marked as private.
private-commits = "description(glob:'private:*')"

[ui]
default-command = "status"
allow-filesets = true

# Use difftastic for displaying diffs.
diff-formatter = ["difft", "--color=always", "$left", "$right"]

# ...and `meld-3` for editing it. This is an experimental configuration that
# leverages three-pane merging. See also:
# https://martinvonz.github.io/jj/latest/config/#experimental-3-pane-diff-editing
diff-editor = "meld-3"

# We're also going to use it for merges, e.g. the `resolve` command.
merge-editor = "meld"

# As I am using mostly the edit workflow, the prev/next commands can be adjusted
# a bit to my needs. This way, jujutsu is not taking the previous node (@-) to determine
# where to go, but the current node (@) instead.
#
# https://jj-vcs.github.io/jj/latest/config/#behavior-of-prev-and-next-commands 
movement.edit = true

[templates]
op_log_node = 'if(current_operation, "@", "◉")'
log_node = '''
label("node",
  coalesce(
    if(!self, label("elided", "~")),
    if(current_working_copy, label("working_copy", "@")),
    if(conflict, label("conflict", "×")),
    if(immutable, label("immutable", "◆")),
    if(description.starts_with("wip: "), label("wip", "!")),
    if(description.starts_with("draft: "), label("wip", "!")),
    label("normal", "·")
  )
)
'''
# Always add the DCO ownership signing trailer and encourage myself to add an
# issue number to all commits. Especially for work, this might turn out to be
# useful.
#
# This is only added on non-empty commits. Added to prevent descriptions that
# start with the trailers.
commit_trailers = '''
if(!empty,
    format_signed_off_by_trailer(self) ++
    if(!trailers.contains_key("Closes"), "Closes: ")
)
'''

# Display a short summary about this commit in the description.
# This is similar how Git does its COMMIT_MSG with commit.verbose=true.
#
# Copied from: https://oppi.li/posts/configuring_jujutsu/
draft_commit_description ='''
    concat(
      coalesce(description, default_commit_description, "\n"),
      surround(
        "\nJJ: This commit contains the following changes:\n", "",
        indent("JJ:     ", diff.stat(72)),
      ),
      "\nJJ: ignore-rest\n",
      diff.git(),
    )
'''
log = '''
  if(root,
    format_root_commit(self),
    label(if(current_working_copy, "working_copy"),
      concat(
        separate(" ",
          pad_end(4, format_short_change_id_with_hidden_and_divergent_info(self), '_'),
          if(empty, label("empty", "(empty)")),
          if(description,
            description.first_line(),
            label(if(empty, "empty"), description_placeholder),
          ),
          bookmarks,
          tags,
          working_copies,
          if(git_head, label("git_head", "HEAD")),
          if(conflict, label("conflict", "conflict")),
          if(config("ui.show-cryptographic-signatures").as_boolean(),
            format_short_cryptographic_signature(signature)),
        ) ++ "\n",
      ),
    )
  )
'''

[template-aliases]
'format_short_signature(signature)' = '"<" ++ signature.email().local() ++ ">"'
'format_short_change_id(id)' = 'id.shortest()'
'format_short_commit_id(id)' = 'id.shortest(7)'
'format_timestamp(timestamp)' = 'timestamp.local().format("%Y-%m-%d %H:%M")'

# Derived from the builtin_log_oneline. Items that are not important for "jj
# open" are removed for compacting the output.
log_oneline_compact = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    concat(
      separate(" ",
        format_short_change_id_with_hidden_and_divergent_info(self),
        bookmarks,
        tags,
        working_copies,
        if(conflict, label("conflict", "conflict")),
        if(empty, label("empty", "(empty)")),
        if(description,
          description.first_line(),
          label(if(empty, "empty"), description_placeholder),
        ),
      ) ++ "\n",
    ),
  )
)
'''

[aliases]
goto = ["edit"]
open = ["log", "--reversed", "-r", "open()",  "--no-pager", "--template", "log_oneline_compact"]

# Found here: https://github.com/jj-vcs/jj/discussions/5812
tug = ["bookmark", "move", "--from", "heads(::@- & bookmarks())", "--to", "@-"]

# Rebases the selected revisions on top of the trunk.
remain = [
  "rebase",
  "--skip-emptied",
  "-d",
  "trunk()",
  "-s",
]

# Auto-resolve via mergiraf. See also: https://mergiraf.org/usage.html#interactive-use-with-jujutsu
auto-resolve = ["resolve", "--tool", "mergiraf"]

# Source: https://github.com/jj-vcs/jj/discussions/4974#discussioncomment-11377322
rebase-open-work = ["rebase", "-b", "all:mutable() & mine()", "-d", "trunk()"]

# `jj sl` shows commits on the working-copy branch, compared to the trunk
# (usually main).
sl = [
  "log",
  "--template",
  "builtin_log_oneline",
  "-r",
  "(trunk()..@):: | (trunk()..@)-",
]
n = ["new"]
push = ["git", "push"]
fetch = ["git", "fetch"]
conflicts = [
  "log",
  "-r",
  "conflicts()",
  "--template",
  "builtin_log_oneline",
  "--no-graph",
]

# Abandons all empty commits.
abandon-empty = ["abandon", "empty() & mutable()"]

[revset-aliases]
'user(x)' = 'author(x) | committer(x)'
'open()' = '(mine() ~ ::trunk()) ~ heads(empty())'
'wip' = 'description("wip: ") | description("draft: ")'
'ready' = 'open() ~ (wip::) ~ private'
'private' = 'description("private: ")'

[signing]
behavior = "own"
backend = "ssh"
key = "{{ .chezmoi.homeDir }}/.ssh/id_ed25519.pub"

[fix.tools.yamlfmt]
command = ["yamlfmt", "-global_conf", "-in"]
patterns = ["glob:'**/*.yml'", "glob:'**/*.yaml'"]

[fix.tools.prettier]
command = ["npx", "prettier", "--stdin-filepath=$path"]
patterns = [
  "glob:'**/*.tsx'",
  "glob:'**/*.ts'",
  "glob:'**/*.jsx'",
  "glob:'**/*.js'",
  "glob:'**/*.css'",
  "glob:'**/*.html'",
]

[fix.tools.gofumpt]
command = ["gofumpt"]
patterns = ["glob:'**/*.go'"]

[fix.tools.jq]
command = ["jq", "."]
patterns = ["glob:'**/*.json'"] 

[fix.tools.taplo]
command = ["taplo", "fmt", "--stdin-filepath=$path", "-"]
patterns = ["glob:'**/*.toml'"]

[fix.tools.ruff]
command = ["ruff", "format", "-"]
patterns = ["glob:'**/*.py'"]

[fix.tools.golangci-lint]
command = ["golangci-lint", "fmt", "--stdin"]
patterns = ["glob:'**/*.go'"]

[fix.tools.shfmt]
command = ["shfmt", "--filename=$path"]
patterns = ["glob:'**/*.sh'"]
